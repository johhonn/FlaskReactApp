'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

exports['default'] = {
  getDisplayFormat: function getDisplayFormat(props) {
    var _ref = props || this.props;

    var displayFormat = _ref.displayFormat;
    var fixedMode = _ref.fixedMode;
    var startMode = _ref.startMode;

    if (displayFormat) {
      return displayFormat;
    }
    if (fixedMode) {
      switch (startMode) {
        case 'day':
          return 'DD';
        case 'month':
          return 'MMMM';
        case 'year':
          return 'YYYY';
      }
    }

    return 'L';
  },

  formatReturnedDate: function formatReturnedDate(date, props) {
    var _ref2 = props || this.props;

    var returnFormat = _ref2.returnFormat;

    return date.format(returnFormat);
  },

  formatDisplayedDate: function formatDisplayedDate(date, props) {
    return date.format(this.getDisplayFormat(props));
  },

  parsePropDateString: function parsePropDateString(dateString, props) {
    var _ref3 = props || this.props;

    var returnFormat = _ref3.returnFormat;

    if (!returnFormat) {
      return _moment2['default'](dateString);
    } else {
      return _moment2['default'](dateString, returnFormat, true);
    }
  },

  parseInputDateString: function parseInputDateString(dateString, props) {
    var format = this.getDisplayFormat(props);
    if (!format) {
      return _moment2['default'](dateString);
    } else {
      return _moment2['default'](dateString, format, true);
    }
  }

};
module.exports = exports['default'];