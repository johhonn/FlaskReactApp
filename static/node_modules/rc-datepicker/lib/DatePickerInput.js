'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _lodashOmit = require('lodash/omit');

var _lodashOmit2 = _interopRequireDefault(_lodashOmit);

var _DatePicker = require('./DatePicker');

var _DatePicker2 = _interopRequireDefault(_DatePicker);

var _utilsDateUtils = require('./utils/DateUtils');

var _utilsDateUtils2 = _interopRequireDefault(_utilsDateUtils);

var _utilsFormatMixin = require('./utils/formatMixin');

var _utilsFormatMixin2 = _interopRequireDefault(_utilsFormatMixin);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utilsValueLinkMixinJs = require('./utils/ValueLinkMixin.js');

var _utilsValueLinkMixinJs2 = _interopRequireDefault(_utilsValueLinkMixinJs);

var INVALID = 'Invalid date';
var ENTER_KEYCODE = 13;

var propTypes = {
  onChange: _react.PropTypes.func,
  onShow: _react.PropTypes.func,
  onHide: _react.PropTypes.func,
  value: _utilsDateUtils2['default'].evaluateDateProp,
  valueLink: _react.PropTypes.shape({
    value: _utilsDateUtils2['default'].evaluateDateProp,
    requestChange: _react.PropTypes.func.isRequired
  }),
  defaultValue: _utilsDateUtils2['default'].evaluateDateProp,
  minDate: _utilsDateUtils2['default'].evaluateDateProp,
  maxDate: _utilsDateUtils2['default'].evaluateDateProp,
  locale: _react.PropTypes.string,
  startMode: _react.PropTypes.string,
  fixedMode: _react.PropTypes.bool,
  displayFormat: _react.PropTypes.string,
  returnFormat: _react.PropTypes.string,
  format: _react.PropTypes.string,
  validationFormat: _react.PropTypes.string,
  showOnInputClick: _react.PropTypes.bool,
  closeOnClickOutside: _react.PropTypes.bool,
  showInputButton: _react.PropTypes.bool,
  autoClose: _react.PropTypes.bool,
  floating: _react.PropTypes.bool,
  iconClassName: _react.PropTypes.string,
  iconClearClassName: _react.PropTypes.string,
  onClear: _react.PropTypes.func,
  className: _react.PropTypes.string, // used to omit from inputProps
  style: _react.PropTypes.object // used to omit from inputProps
};

var DatePickerInput = _react2['default'].createClass({
  displayName: 'DatePickerInput',

  propTypes: propTypes,

  mixins: [_utilsValueLinkMixinJs2['default'], _utilsFormatMixin2['default']],

  getDefaultProps: function getDefaultProps() {
    return {
      onShow: function onShow() {},
      onHide: function onHide() {},
      startMode: 'day',
      autoClose: true,
      closeOnClickOutside: true,
      floating: true,
      showInputButton: true,
      iconClassName: '',
      className: '',
      style: {}
    };
  },

  getInitialState: function getInitialState() {
    var _date = this.getValueLink().value || this.props.defaultValue;
    var date = typeof _date === 'string' ? this.parsePropDateString(_date) : _moment2['default'](_date);
    return {
      date: _date ? date : undefined,
      dateString: _date ? this.formatDisplayedDate(date) : '',
      showing: false
    };
  },

  componentDidMount: function componentDidMount() {
    if (this.props.closeOnClickOutside) {
      this.addOnClickListener();
    }
  },

  addOnClickListener: function addOnClickListener() {
    if (window.attachEvent) {
      //Internet Explorer
      window.attachEvent('onclick', this.hideOnClickOutside);
    } else if (window.addEventListener) {
      window.addEventListener('click', this.hideOnClickOutside, false);
    }
  },

  removeOnClickListener: function removeOnClickListener() {
    if (window.detachEvent) {
      //Internet Explorer
      window.detachEvent('onclick', this.hideOnClickOutside);
    } else if (window.removeEventListener) {
      window.removeEventListener('click', this.hideOnClickOutside, false);
    }
  },

  getDatePickerInput: function getDatePickerInput() {
    return _reactDom2['default'].findDOMNode(this.refs.datePickerInput);
  },

  isEventInsideDatePickerInput: function isEventInsideDatePickerInput(el) {
    if (el === this.getDatePickerInput()) {
      return true;
    } else if (el.parentNode) {
      return this.isEventInsideDatePickerInput(el.parentNode);
    } else {
      return false;
    }
  },

  hideOnClickOutside: function hideOnClickOutside(e) {
    if (!this.isEventInsideDatePickerInput(e.target) && this.state.showing) {
      this.hide();
    }
  },

  hide: function hide() {
    this.setState({ showing: false }, this.props.onHide);
  },

  show: function show() {
    if (!this.state.showing) {
      this.setState({ showing: true }, this.props.onShow);
    }
  },

  toggleDatePicker: function toggleDatePicker() {
    var callback = this.state.showing ? this.props.onHide : this.props.onShow;
    this.setState({ showing: !this.state.showing }, callback);
  },

  hideOnEnterKey: function hideOnEnterKey(event) {
    if (event.keyCode === ENTER_KEYCODE) {
      this.hide();
    }
  },

  onClear: function onClear() {
    var _date = this.props.defaultValue;
    var date = typeof _date === 'string' ? this.parsePropDateString(_date) : _moment2['default'](_date);
    this.setState({
      date: _date ? date : undefined,
      dateString: _date ? this.formatDisplayedDate(date) : '',
      showing: false
    }, this.props.onClear);
  },

  _onChangeDate: function _onChangeDate(jsDate) {
    var newDate = _moment2['default'](jsDate);
    var newDateString = this.formatDisplayedDate(newDate);
    if (this.props.autoClose) {
      this.hide();
    }
    this.getValueLink().requestChange(jsDate, this.formatReturnedDate(newDate));
    if (newDateString !== this.state.dateString) {
      this.setState({
        date: newDate,
        dateString: newDateString
      });
    }
  },

  onChangeInput: function onChangeInput(dateString) {
    var _this = this;

    var parsedDate = this.parseInputDateString(dateString);
    var date = parsedDate.isValid() ? parsedDate : this.state.date;

    var jsDate = parsedDate.isValid() ? parsedDate.toDate() : INVALID;
    var returnedDateString = jsDate ? this.formatReturnedDate(parsedDate) : INVALID;

    this.setState({ dateString: dateString, date: date }, function () {
      return _this.getValueLink().requestChange(jsDate, returnedDateString);
    });
  },

  getDatePicker: function getDatePicker() {
    if (this.state.showing) {
      return _react2['default'].createElement(_DatePicker2['default'], {
        value: this.state.date ? this.state.date.toDate() : undefined,
        onChange: this._onChangeDate,
        defaultValue: this.props.defaultValue,
        minDate: this.props.minDate,
        maxDate: this.props.maxDate,
        locale: this.props.locale,
        startMode: this.props.startMode,
        fixedMode: this.props.fixedMode,
        floating: this.props.floating,
        closeOnClickOutside: this.props.closeOnClickOutside
      });
    }
  },

  render: function render() {
    var inputProps = _lodashOmit2['default'](this.props, Object.keys(propTypes));
    var _props = this.props;
    var showInputButton = _props.showInputButton;
    var active = _props.showing;
    var iconClassName = _props.iconClassName;
    var showOnInputClick = _props.showOnInputClick;
    var onClear = _props.onClear;
    var iconClearClassName = _props.iconClearClassName;
    var className = _props.className;
    var style = _props.style;

    var inputButton = _react2['default'].createElement(
      'div',
      { className: _classnames2['default']('input-button', { active: active }), onClick: this.toggleDatePicker },
      _react2['default'].createElement('i', { className: iconClassName })
    );

    var clearButton = _react2['default'].createElement(
      'div',
      { className: 'clear-button', onClick: this.onClear },
      _react2['default'].createElement('i', { className: iconClearClassName })
    );

    var onInputClick = showOnInputClick ? this.show : undefined;
    return _react2['default'].createElement(
      'div',
      {
        className: _classnames2['default']('react-datepicker-component', className),
        style: style,
        ref: 'datePickerInput'
      },
      _react2['default'].createElement(
        'div',
        { className: 'react-datepicker-input' },
        _react2['default'].createElement('input', _extends({
          valueLink: { value: this.state.dateString, requestChange: this.onChangeInput },
          onClick: onInputClick,
          onKeyUp: this.hideOnEnterKey
        }, inputProps)),
        _react2['default'].createElement(
          'div',
          { className: 'button-wrapper' },
          onClear && clearButton,
          showInputButton && inputButton
        )
      ),
      this.getDatePicker()
    );
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _getValueLink = this.getValueLink(nextProps);

    var value = _getValueLink.value;

    if (value !== INVALID && value !== this.getValueLink().value) {
      if (value) {
        var date = typeof value === 'string' ? this.parsePropDateString(value, nextProps) : _moment2['default'](value);
        this.setState({
          date: date,
          dateString: date.isValid() ? this.formatDisplayedDate(date, nextProps) : this.state.dateString
        });
      } else {
        this.setState({
          date: undefined,
          dateString: ''
        });
      }
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this.props.closeOnClickOutside) {
      this.removeOnClickListener();
    }
  }

});

exports['default'] = DatePickerInput;
module.exports = exports['default'];