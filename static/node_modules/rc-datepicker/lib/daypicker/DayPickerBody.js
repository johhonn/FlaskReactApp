'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _InvalidDate = require('../InvalidDate');

var _InvalidDate2 = _interopRequireDefault(_InvalidDate);

var _Picker = require('../Picker');

var _Picker2 = _interopRequireDefault(_Picker);

var _Row = require('../Row');

var _Row2 = _interopRequireDefault(_Row);

var _utilsDateUtils = require('../utils/DateUtils');

var _utilsDateUtils2 = _interopRequireDefault(_utilsDateUtils);

var _lodashRange = require('lodash/range');

var _lodashRange2 = _interopRequireDefault(_lodashRange);

var DayPickerBody = _react2['default'].createClass({
  displayName: 'DayPickerBody',

  propTypes: {
    visibleDate: _react.PropTypes.any.isRequired,
    date: _utilsDateUtils2['default'].evaluateDateProp,
    minDate: _utilsDateUtils2['default'].evaluateDateProp,
    maxDate: _utilsDateUtils2['default'].evaluateDateProp,
    onSelectDate: _react.PropTypes.func.isRequired,
    mode: _react.PropTypes.string.isRequired
  },

  render: function render() {
    var _this = this;

    if (!this.props.visibleDate.isValid()) {
      return _react2['default'].createElement(_InvalidDate2['default'], { invalidDate: this.props.visibleDate.format() });
    }
    var year = this.props.visibleDate.year();
    var month = this.props.visibleDate.month();
    var selectedDate = this.props.date ? this.props.date.format('DD/MM/YYYY') : undefined;

    var visibleDays = _utilsDateUtils2['default'].getVisibleDays(month, year);
    var days = visibleDays.days.map(function (dayOfMonth, index) {
      var date = _this.props.visibleDate.clone();
      var isCurrent = index >= visibleDays.startCurrent && index <= visibleDays.endCurrent;
      if (!isCurrent) {
        date.add(index < visibleDays.startCurrent ? -1 : 1, 'M');
      }
      date.date(dayOfMonth);
      return _react2['default'].createElement(_Picker2['default'], {
        date: date,
        isSelected: date.format('DD/MM/YYYY') === selectedDate,
        isCurrent: isCurrent,
        isEnabled: _utilsDateUtils2['default'].isInsideTheEnabledArea(date, _this.props.mode, _this.props.minDate, _this.props.maxDate),
        onSelectDate: _this.props.onSelectDate,
        mode: _this.props.mode,
        key: index
      });
    });
    var nColumns = 7;
    var nRows = 6;
    var rows = _lodashRange2['default'](nRows).map(function (index) {
      return _react2['default'].createElement(_Row2['default'], { pickers: days.slice(nColumns * index, nColumns * (index + 1)), mode: _this.props.mode, key: index });
    });

    return _react2['default'].createElement(
      'div',
      { className: 'react-datepicker-body' },
      rows
    );
  }
});

exports['default'] = DayPickerBody;
module.exports = exports['default'];