'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _utilsDateUtilsJs = require('./utils/DateUtils.js');

var _utilsDateUtilsJs2 = _interopRequireDefault(_utilsDateUtilsJs);

var _utilsFormatMixin = require('./utils/formatMixin');

var _utilsFormatMixin2 = _interopRequireDefault(_utilsFormatMixin);

var _daypickerDayPicker = require('./daypicker/DayPicker');

var _daypickerDayPicker2 = _interopRequireDefault(_daypickerDayPicker);

var _monthpickerMonthPicker = require('./monthpicker/MonthPicker');

var _monthpickerMonthPicker2 = _interopRequireDefault(_monthpickerMonthPicker);

var _yearpickerYearPicker = require('./yearpicker/YearPicker');

var _yearpickerYearPicker2 = _interopRequireDefault(_yearpickerYearPicker);

var _utilsValueLinkMixin = require('./utils/ValueLinkMixin');

var _utilsValueLinkMixin2 = _interopRequireDefault(_utilsValueLinkMixin);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var DatePicker = _react2['default'].createClass({
  displayName: 'DatePicker',

  propTypes: {
    onChange: _react.PropTypes.func,
    value: _utilsDateUtilsJs2['default'].evaluateDateProp,
    valueLink: _react.PropTypes.shape({
      value: _utilsDateUtilsJs2['default'].evaluateDateProp,
      requestChange: _react2['default'].PropTypes.func.isRequired
    }),
    defaultValue: _utilsDateUtilsJs2['default'].evaluateDateProp,
    minDate: _utilsDateUtilsJs2['default'].evaluateDateProp,
    maxDate: _utilsDateUtilsJs2['default'].evaluateDateProp,
    locale: _react.PropTypes.string,
    startMode: _react.PropTypes.string,
    fixedMode: _react.PropTypes.bool,
    returnFormat: _react.PropTypes.string,
    floating: _react.PropTypes.bool,
    closeOnClickOutside: _react.PropTypes.bool, // used only with DatePickerInput
    className: _react.PropTypes.string,
    style: _react.PropTypes.object
  },

  mixins: [_utilsValueLinkMixin2['default'], _utilsFormatMixin2['default']],

  getDefaultProps: function getDefaultProps() {
    return {
      startMode: 'day',
      className: '',
      style: {}
    };
  },

  getInitialState: function getInitialState() {
    if (this.props.locale) {
      _moment2['default'].locale(this.props.locale);
      if (process.env.NODE_ENV !== 'production' && _moment2['default'].locale() !== this.props.locale) {
        console.warn('Setting "' + this.props.locale + '" as locale failed. Did you import it correctly?'); // eslint-disable-line no-console
      }
    }
    return this.getStateFromProps(this.props);
  },

  getStateFromProps: function getStateFromProps(_props) {
    var _getValueLink = this.getValueLink(_props);

    var value = _getValueLink.value;
    var defaultValue = _props.defaultValue;
    var startMode = _props.startMode;

    var date = typeof value === 'string' ? this.parsePropDateString(value) : _moment2['default'](value);
    var initialDate = typeof defaultValue === 'string' ? this.parsePropDateString(defaultValue) : _moment2['default'](defaultValue);

    var visibleDate = value ? date.clone() : initialDate; // must be copy, otherwise they get linked
    return {
      date: value ? date.clone() : undefined,
      visibleDate: visibleDate,
      mode: startMode
    };
  },

  onChangeVisibleDate: function onChangeVisibleDate(date) {
    this.setState({ visibleDate: date });
  },

  onChangeSelectedDate: function onChangeSelectedDate(date) {
    var _this = this;

    this.setState({
      visibleDate: date.clone(), // must be copy, otherwise they get linked
      date: date
    }, function () {
      return _this.getValueLink().requestChange(date.toDate());
    });
  },

  onChangeMode: function onChangeMode(mode) {
    var _this2 = this;

    setTimeout(function () {
      return _this2.setState({ mode: mode });
    });
  },

  changeYear: function changeYear(year) {
    this.setState({ visibleDate: this.state.visibleDate.clone().year(year) });
  },

  changeMonth: function changeMonth(month) {
    this.setState({ visibleDate: this.state.visibleDate.clone().month(month) });
  },

  getDayPicker: function getDayPicker() {
    return _react2['default'].createElement(_daypickerDayPicker2['default'], {
      changeMonth: this.changeMonth,
      date: this.state.date,
      visibleDate: this.state.visibleDate,
      minDate: this.props.minDate,
      maxDate: this.props.maxDate,
      onSelectDate: this.onChangeSelectedDate,
      onChangeMode: this.onChangeMode,
      mode: this.state.mode,
      fixedMode: this.props.fixedMode,
      className: this.props.className
    });
  },

  getMonthPicker: function getMonthPicker() {
    return _react2['default'].createElement(_monthpickerMonthPicker2['default'], {
      changeYear: this.changeYear,
      date: this.state.date,
      visibleDate: this.state.visibleDate,
      minDate: this.props.minDate,
      maxDate: this.props.maxDate,
      onSelectDate: this.onChangeSelectedDate,
      onChangeVisibleDate: this.onChangeVisibleDate,
      onChangeMode: this.onChangeMode,
      mode: this.state.mode,
      fixedMode: this.props.fixedMode,
      className: this.props.className
    });
  },

  getYearPicker: function getYearPicker() {
    return _react2['default'].createElement(_yearpickerYearPicker2['default'], {
      changeYear: this.changeYear,
      date: this.state.date,
      visibleDate: this.state.visibleDate,
      minDate: this.props.minDate,
      maxDate: this.props.maxDate,
      onSelectDate: this.onChangeSelectedDate,
      onChangeVisibleDate: this.onChangeVisibleDate,
      onChangeMode: this.onChangeMode,
      mode: this.state.mode,
      fixedMode: this.props.fixedMode,
      className: this.props.className
    });
  },

  render: function render() {
    var picker = undefined;
    switch (this.state.mode) {
      case 'day':
        picker = this.getDayPicker();
        break;

      case 'month':
        picker = this.getMonthPicker();
        break;

      case 'year':
        picker = this.getYearPicker();
        break;
    }

    return _react2['default'].createElement(
      'div',
      {
        className: _classnames2['default']('react-datepicker', this.props.className, { floating: this.props.floating }),
        style: this.props.style
      },
      picker
    );
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.getValueLink(nextProps).value !== this.getValueLink().value) {
      this.setState(this.getStateFromProps(nextProps));
    }
  }

});

exports['default'] = DatePicker;
module.exports = exports['default'];