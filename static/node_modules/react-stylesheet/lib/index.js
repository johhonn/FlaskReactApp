/**
 * @copyright 2015, Prometheus Research, LLC
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x4, _x5, _x6) { var _again = true; _function: while (_again) { var object = _x4, property = _x5, receiver = _x6; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x4 = parent; _x5 = property; _x6 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.create = create;
exports.override = override;
exports.style = style;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _utilities = require('./utilities');

/**
 * Create stylesheet from stylesheet spec.
 */

function create(spec) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

  var styleComponent = options.style || style;
  var stylesheet = {};
  for (var key in spec) {
    if (!spec.hasOwnProperty(key)) {
      continue;
    }
    var item = spec[key];
    if ((0, _utilities.isComponent)(item)) {
      stylesheet[key] = item;
    } else {
      var _item$Component = item.Component;
      var Component = _item$Component === undefined ? 'div' : _item$Component;

      var componentStylesheet = _objectWithoutProperties(item, ['Component']);

      Component = styleComponent(Component, componentStylesheet, options);
      stylesheet[key] = Component;
    }
  }
  return stylesheet;
}

/**
 * Produce a new stylesheet by overriding keys from the original stylesheet with
 * values from spec.
 *
 * Note that as stylesheet is also a valid spec then this function can be used
 * to override one stylesheet with another.
 */

function override(stylesheet, spec) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var styleComponent = options.style || style;
  stylesheet = _extends({}, stylesheet);
  for (var key in spec) {
    if (!spec.hasOwnProperty(key)) {
      continue;
    }
    (0, _invariant2['default'])(stylesheet[key] !== undefined, 'override(...): invalid override, stylesheet does not have key "%s"', key);
    var item = spec[key];
    if ((0, _utilities.isComponent)(item)) {
      stylesheet[key] = item;
    } else {
      var _spec$key = spec[key];
      var _spec$key$Component = _spec$key.Component;
      var Component = _spec$key$Component === undefined ? stylesheet[key] : _spec$key$Component;

      var componentStylesheet = _objectWithoutProperties(_spec$key, ['Component']);

      stylesheet[key] = styleComponent(Component, componentStylesheet, options);
    }
  }
  return stylesheet;
}

/**
 * Apply a stylesheet to a component.
 */

function style(Component, stylesheet) {
  var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  (0, _invariant2['default'])((0, _utilities.isComponent)(Component), 'Expected a valid React component, got: %s', typeof Component);
  if (typeof Component.style === 'function') {
    return Component.style(stylesheet);
  } else if (Component.stylesheet) {
    var _ret = (function () {
      var displayName = options.displayName || (0, _utilities.getComponentDisplayName)(Component);
      return {
        v: (function (_Component) {
          _inherits(_class, _Component);

          function _class() {
            _classCallCheck(this, _class);

            _get(Object.getPrototypeOf(_class.prototype), 'constructor', this).apply(this, arguments);
          }

          _createClass(_class, null, [{
            key: 'displayName',
            value: displayName,
            enumerable: true
          }, {
            key: 'stylesheet',
            value: override(Component.stylesheet, stylesheet, options),
            enumerable: true
          }]);

          return _class;
        })(Component)
      };
    })();

    if (typeof _ret === 'object') return _ret.v;
  } else if (options.styleDOM) {
    return options.styleDOM(Component, stylesheet);
  } else {
    (0, _invariant2['default'])(false, 'Unable to style component: <%s />', (0, _utilities.getComponentDisplayName)(Component));
  }
}
